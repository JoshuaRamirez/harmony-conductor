{"version":3,"file":"index.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,oBAAqB,GAAIH,GACN,iBAAZC,QACdA,QAAQ,qBAAuBD,IAE/BD,EAAK,qBAAuBC,GAC7B,CATD,CASGK,MAAM,I,oHCPT,8BAoCA,QAjCkB,EAAAC,UAAd,SAAgCC,EAAmBC,EAAwDC,GAA3G,WACI,IAAKF,EACD,MAAM,IAAIG,MAAM,gCAEpB,GAA0B,mBAAfF,EACP,MAAM,IAAIE,MAAM,4CAEpB,IAAKF,EACD,MAAM,IAAIE,MAAM,8BAGpB,IAAMC,EAAyC,CAC3CC,WAAYH,EAAUD,EAAWK,KAAKJ,GAAWD,EACjDM,UAAWP,EACXQ,aAAa,WAAO,EAEM,WAC1B,EAAKC,eAAiB,EAAKA,eAAeC,QAAO,SAAAC,GAAgB,OAAAA,IAAiBP,CAAjB,GACrE,IAEA,OADAQ,KAAKH,eAAeI,KAAKT,GAClBA,CACX,EAEc,EAAAU,QAAd,SAA8Bd,EAAmBe,GAC7C,IAAKf,EACD,MAAM,IAAIG,MAAM,gCAEpBS,KAAKH,eACAC,QAAO,SAAAC,GAAgB,OAAAA,EAAaJ,YAAcP,CAA3B,IACvBgB,SAAQ,SAAAL,GACLA,EAAaN,WAAWU,EAC5B,GACR,EAlCe,EAAAN,eAA2C,GAmC9D,C,CApCA,GAAa,EAAAQ,UAAAA,C","sources":["webpack://harmony-conductor/webpack/universalModuleDefinition","webpack://harmony-conductor/./src/Conductor.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"harmony-conductor\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"harmony-conductor\"] = factory();\n\telse\n\t\troot[\"harmony-conductor\"] = factory();\n})(self, () => {\nreturn ","import {ISubscription} from \"./ISubscription\";\r\n\r\nexport class Conductor {\r\n    private static _subscriptions: ISubscription<unknown>[] = [];\r\n\r\n    public static Subscribe<TEvent>(eventName: string, subscriber: ((payload: TEvent) => void) | (() => void), thisArg?: object): ISubscription<TEvent> {\r\n        if (!eventName) {\r\n            throw new Error(\"Missing eventName parameter.\");\r\n        }\r\n        if (typeof subscriber !== 'function') {\r\n            throw new Error(\"Missing a function in handler parameter.\");\r\n        }\r\n        if (!subscriber) {\r\n            throw new Error(\"Missing handler parameter.\");\r\n        }\r\n\r\n        const newSubscription: ISubscription<TEvent> = {\r\n            Subscriber: thisArg ? subscriber.bind(thisArg) : subscriber,\r\n            EventName: eventName,\r\n            UnSubscribe: () => {}\r\n        };\r\n        newSubscription.UnSubscribe = () => {\r\n            this._subscriptions = this._subscriptions.filter(subscription => subscription !== newSubscription);\r\n        }\r\n        this._subscriptions.push(newSubscription as ISubscription<unknown>);\r\n        return newSubscription;\r\n    }\r\n\r\n    public static Publish<TEvent>(eventName: string, payload?: TEvent): void {\r\n        if (!eventName) {\r\n            throw new Error(\"Missing eventName parameter.\");\r\n        }\r\n        this._subscriptions\r\n            .filter(subscription => subscription.EventName === eventName)\r\n            .forEach(subscription => {\r\n                subscription.Subscriber(payload);\r\n            });\r\n    }\r\n}\r\n"],"names":["root","factory","exports","module","define","amd","self","Subscribe","eventName","subscriber","thisArg","Error","newSubscription","Subscriber","bind","EventName","UnSubscribe","_subscriptions","filter","subscription","this","push","Publish","payload","forEach","Conductor"],"sourceRoot":""}